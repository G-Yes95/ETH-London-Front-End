'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
require('react');
require('@dynamic-labs/sdk-api');
require('../../../shared/logger.cjs');
var getChainIcon = require('../../../shared/utils/functions/chain/getChainIcon.cjs');
require('@dynamic-labs/wallet-book');
require('../../../utils/constants/colors.cjs');
require('../../../shared/utils/classes/storage/localStorage.cjs');
require('viem');
require('@dynamic-labs/utils');
require('@dynamic-labs/iconic');
require('../../../context/ViewContext/ViewContext.cjs');
require('../../../shared/consts/index.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useInternalDynamicContext.cjs');
require('@dynamic-labs/multi-wallet');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
require('react-dom');
require('react-focus-lock');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../config/ApiEndpoint.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../utils/hooks/useWallets/utils/verifyMagicIsSetup/verifyMagicIsSetup.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('react-i18next');
require('../../../components/OverlayCard/OverlayCard.context.cjs');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../context/MockContext/MockContext.cjs');
require('../../../context/QrCodeContext/QrCodeContext.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
var getChainStepState = require('../utils/getChainStepState/getChainStepState.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/EmailVerificationContext/EmailVerificationContext.cjs');
require('qrcode');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('i18next');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('yup');
require('../../../components/UserProfile/parts/UserProfileField/components/VerifiedEmailIcon/VerifiedEmailIcon.cjs');
require('@dynamic-labs/types');
require('../../../utils/hooks/useUserUpdateRequest/useUpdateUser/useUpdateUser.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('formik');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
var Step = require('../../../components/Step/Step.cjs');
var Stepper = require('../../../components/Stepper/Stepper.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');

const WalletProgressStepper = () => {
    const { walletsToConnectByChain = [], walletsByChain = [] } = useInternalDynamicContext.useInternalDynamicContext();
    const allChains = walletsByChain.map(({ chain }) => chain);
    const chainsLeftToConnect = [...walletsToConnectByChain].map(({ chain }) => chain);
    return (jsxRuntime.jsx("div", { className: 'wallet-progress-stepper', "data-testid": 'wallet-progress-stepper', children: jsxRuntime.jsx(Stepper.Stepper, { children: allChains.map((chain, index) => {
                var _a;
                const chainInfo = walletConnectorCore.getChainInfo(chain);
                const PrimaryWalletChainIcon = getChainIcon.getChainIcon(chain);
                return (jsxRuntime.jsx(Step.Step, { state: getChainStepState.getChainStepState(chain, chainsLeftToConnect), icon: jsxRuntime.jsx(PrimaryWalletChainIcon, {}), children: (_a = chainInfo === null || chainInfo === void 0 ? void 0 : chainInfo.blockchainName) !== null && _a !== void 0 ? _a : chainInfo === null || chainInfo === void 0 ? void 0 : chainInfo.displayName }, chain));
            }) }) }));
};

exports.WalletProgressStepper = WalletProgressStepper;
