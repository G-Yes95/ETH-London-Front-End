'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../../_virtual/_tslib.cjs');
var React = require('react');
require('@dynamic-labs/sdk-api');
require('../../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../../../utils/constants/colors.cjs');
require('../../../../shared/utils/classes/storage/localStorage.cjs');
require('viem');
require('@dynamic-labs/utils');
require('../../../../shared/consts/index.cjs');
require('@dynamic-labs/multi-wallet');
var isWalletConnected = require('../../../../utils/functions/isWalletConnected/isWalletConnected.cjs');

const useFetchBalance = ({ connector, chain, address, network, }) => {
    const [balance, setBalance] = React.useState('0.0');
    React.useEffect(() => {
        const fetchBalance = () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
            if (!chain ||
                !address ||
                (connector.supportsNetworkSwitching() && !network))
                return;
            const isConnected = yield isWalletConnected.isWalletConnected({
                address,
                chain,
                connector,
            });
            /* istanbul ignore else */
            if (isConnected) {
                const value = yield connector.getBalance();
                setBalance(value);
            }
        });
        fetchBalance();
    }, [address, chain, connector, network]);
    return [balance];
};

exports.useFetchBalance = useFetchBalance;
