'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('@dynamic-labs/sdk-api');
var logger = require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('react');
require('@dynamic-labs/wallet-book');
require('../../../utils/constants/colors.cjs');
require('../../../shared/utils/classes/storage/localStorage.cjs');
require('viem');
require('@dynamic-labs/utils');
require('../../../shared/consts/index.cjs');

const errorCodesMapping = {
    '-32603': 'Could not replace existing transaction',
    0: 'The operation either timed out or was not allowed.',
    16: 'Invalid Passkey signature. Select the passkey for this account and device.',
    INSUFFICIENT_FUNDS: 'Insufficient funds for this transaction.',
};
const errorReasonsMapping = {
    'provided ENS name resolves to null': 'Invalid address. Please check that the entered address is correct.',
};
const transactionErrorMessage = (error) => {
    var _a;
    logger.logger.debug('transaction error]:', error);
    const { code } = error;
    const defaultMessage = 'Something went wrong.';
    // turnkey request errors
    if (((_a = error === null || error === void 0 ? void 0 : error.cause) === null || _a === void 0 ? void 0 : _a.code) !== undefined &&
        errorCodesMapping[error.cause.code] !== undefined) {
        return errorCodesMapping[error.cause.code];
    }
    if (!code)
        return defaultMessage;
    return (errorCodesMapping[code] ||
        (error.reason && errorReasonsMapping[error.reason]) ||
        defaultMessage);
};

exports.transactionErrorMessage = transactionErrorMessage;
