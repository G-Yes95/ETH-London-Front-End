'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../../_virtual/_tslib.cjs');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
var showPendingConnectView = require('../helpers/showPendingConnectView.cjs');
var isConnectOnly = require('../helpers/isConnectOnly.cjs');
var useInternalDynamicContext = require('../../../../context/DynamicContext/useInternalDynamicContext.cjs');
var ViewContext = require('../../../../context/ViewContext/ViewContext.cjs');
var ErrorContext = require('../../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/sdk-api');
var logger = require('../../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('react/jsx-runtime');
require('react');
require('@dynamic-labs/wallet-book');
var localStorage$1 = require('../../../constants/localStorage.cjs');
require('../../../constants/colors.cjs');
var localStorage = require('../../../../shared/utils/classes/storage/localStorage.cjs');
require('viem');
require('@dynamic-labs/utils');
require('../../../../shared/consts/index.cjs');
var useVerifyWallet = require('../../useVerifyWallet/useVerifyWallet.cjs');
var CaptchaContext = require('../../../../context/CaptchaContext/CaptchaContext.cjs');
var useHandleWalletsToConnect = require('../../useHandleWalletsToConnect/useHandleWalletsToConnect.cjs');
require('@dynamic-labs/multi-wallet');
var isSupportedNetwork = require('../../../functions/isSupportedNetwork/isSupportedNetwork.cjs');
var isProgrammableNetworkSwitchSupported = require('../../../functions/isProgrammableNetworkSwitchSupported/isProgrammableNetworkSwitchSupported.cjs');

const useConnectAndSign = ({ shouldUpdateWallets = true, shouldCallCallback = true, } = {}) => {
    const { setView, goToInitialView } = ViewContext.useViewContext();
    const { setErrorMessage } = ErrorContext.useErrorContext();
    const { captchaToken } = CaptchaContext.useCaptchaContext();
    const { authMode, connectWallet, consumeNonce, displaySiweStatement, environmentId, projectSettings, setIsSingleWalletAccount, user, walletUiUtils, setCallback, setIsVerificationInProgress, } = useInternalDynamicContext.useInternalDynamicContext();
    const { handleWalletsToConnect } = useHandleWalletsToConnect.useHandleWalletsToConnect();
    const verifyWallet = useVerifyWallet.useVerifyWallet({
        consumeNonce,
        displaySiweStatement,
        environmentId,
        projectSettings,
        setIsSingleWalletAccount,
    });
    return ({ walletConnector, fetchPublicAddressOpts = undefined, }) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        // Raise verification ongoing flag
        setIsVerificationInProgress(true);
        try {
            yield showPendingConnectView.showPendingConnectView(walletConnector, setView);
            if (walletConnectorCore.isEmailWalletConnector(walletConnector)) {
                if (walletConnectorCore.isEmailOTPWalletConnector(walletConnector)) {
                    setView('email-wallet-otp-verification-view');
                }
                else if (!walletConnectorCore.isBloctoConnector(walletConnector)) {
                    setView('wait-for-email-confirmation-view');
                }
            }
            const publicWalletAddress = yield connectWallet(walletConnector, fetchPublicAddressOpts, shouldCallCallback);
            if (!publicWalletAddress) {
                return;
            }
            const walletNetwork = yield walletConnector.getNetwork();
            const usesSupportedNetwork = isSupportedNetwork.isSupportedNetwork({
                network: walletNetwork,
                walletConnector,
            });
            if (!usesSupportedNetwork) {
                if (isProgrammableNetworkSwitchSupported.isProgrammableNetworkSwitchSupported(walletConnector)) {
                    return setView('network-not-supported');
                }
                return setView('network-not-supported-manual');
            }
            setCallback('connectSuccess');
            if (isConnectOnly.isConnectOnly(user, authMode)) {
                localStorage.LocalStorage.setToLS(localStorage$1.LAST_USED_WALLET, walletConnector.key);
                if (shouldUpdateWallets) {
                    handleWalletsToConnect({ walletConnector });
                }
                return;
            }
            if ((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.security.hCaptcha) === null || _a === void 0 ? void 0 : _a.enabled) {
                setView('captcha');
                return;
            }
            if (!walletConnectorCore.isEmailWalletConnector(walletConnector) ||
                walletConnectorCore.isBloctoConnector(walletConnector)) {
                setView('pending-signature');
            }
            else {
                walletUiUtils.disabledConfirmationOnce();
            }
            yield verifyWallet({
                captchaToken,
                publicWalletAddress,
                walletConnector,
            });
        }
        catch (err) {
            const userCancelled = (err === null || err === void 0 ? void 0 : err.code) === 'user-cancelled';
            if (!userCancelled)
                logger.logger.debug(err);
            setErrorMessage((_b = err === null || err === void 0 ? void 0 : err.code) === null || _b === void 0 ? void 0 : _b.toString());
            goToInitialView();
            // Since auth failed, clear verification flag
            // But if user cancelled, clearStatesOnBackClick will have already cleared it. So avoid
            // clearing again since that would trigger a warning
            if (!userCancelled)
                setIsVerificationInProgress(false);
            return;
        }
    });
};

exports.useConnectAndSign = useConnectAndSign;
