import { WalletConnector, WalletConnectorEventTypes } from '@dynamic-labs/wallet-connector-core';
/**
 * This type is a copy of the ArgumentMap type from eventemitter3 package.
 * Is used extract the arguments from a event type.
 * Then we can use the arguments to reconstruct the callback we want
 */
type ArgumentMap<T extends object> = {
    [K in keyof T]: T[K] extends (...args: any[]) => void ? Parameters<T[K]> : T[K] extends any[] ? T[K] : any[];
};
type EventArg<Event extends keyof WalletConnectorEventTypes> = ArgumentMap<WalletConnectorEventTypes>[Extract<Event, keyof WalletConnectorEventTypes>];
export declare const useWalletConnectorEvent: <Event_1 extends keyof WalletConnectorEventTypes = keyof WalletConnectorEventTypes>(eventEmitters: WalletConnector | WalletConnector[] | undefined, eventName: Event_1, handler: (connector: WalletConnector, ...args: EventArg<Event_1>) => void) => void;
export {};
