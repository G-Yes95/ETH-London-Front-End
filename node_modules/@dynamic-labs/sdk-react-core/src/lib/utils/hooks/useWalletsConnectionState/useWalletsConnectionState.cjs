'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
require('@dynamic-labs/sdk-api');
var logger = require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../constants/colors.cjs');
require('../../../shared/utils/classes/storage/localStorage.cjs');
require('viem');
require('@dynamic-labs/utils');
require('../../../shared/consts/index.cjs');
require('@dynamic-labs/multi-wallet');
var isWalletConnected = require('../../functions/isWalletConnected/isWalletConnected.cjs');

const connectedWalletStateReducer = (state, connectedWalletsMap) => {
    const isConnectedWalletsMapEmpty = Object.values(connectedWalletsMap).length === 0;
    if (isConnectedWalletsMapEmpty && state.didLoad === false) {
        return state;
    }
    return Object.assign(Object.assign({}, state), { connectedWalletsMap, didLoad: true });
};
const useWalletsConnectionState = (linkedWallets) => {
    const [state, setState] = React.useReducer(connectedWalletStateReducer, {
        connectedWalletsMap: {},
        didLoad: false,
    });
    const lastCallTimestamp = React.useRef(0);
    const computeConnectedStateForWallets = React.useCallback(() => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if (!linkedWallets.length)
            return;
        const callTimestamp = new Date().getTime();
        const diffFromLastCall = callTimestamp - lastCallTimestamp.current;
        lastCallTimestamp.current = callTimestamp;
        // getConnectedAccounts trigger accountChanged event for Phantom EVM wallets
        // which causes a loop of calls to this function
        if (diffFromLastCall < 1000) {
            logger.logger.warn('computeConnectedStateForWallets: skipping due too many calls.');
            return;
        }
        const connectedWalletsMap = {};
        yield Promise.all(linkedWallets.map((wallet) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
            connectedWalletsMap[wallet.id] = yield isWalletConnected.isWalletConnected(wallet);
        })));
        setState(connectedWalletsMap);
    }), [linkedWallets, setState]);
    return {
        computeConnectedStateForWallets,
        connectedWalletMap: state.connectedWalletsMap,
        didConnectedStateLoad: state.didLoad,
    };
};

exports.useWalletsConnectionState = useWalletsConnectionState;
