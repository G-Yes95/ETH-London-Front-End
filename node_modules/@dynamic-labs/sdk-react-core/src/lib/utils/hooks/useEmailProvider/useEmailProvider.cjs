'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var sdkApi = require('@dynamic-labs/sdk-api');
var useInternalDynamicContext = require('../../../context/DynamicContext/useInternalDynamicContext.cjs');
var EmailVerificationContext = require('../../../context/EmailVerificationContext/EmailVerificationContext.cjs');
var ViewContext = require('../../../context/ViewContext/ViewContext.cjs');
var useWalletItemActions = require('../useWalletItemActions/useWalletItemActions.cjs');
var useConnectWithEmail = require('../useConnectWithEmail/useConnectWithEmail.cjs');
var api = require('../../../data/api.cjs');

const useEmailProvider = ({ emailWalletConnector }) => {
    const { projectSettings, environmentId } = useInternalDynamicContext.useInternalDynamicContext();
    const { setEmail: setEmailForVerification, setVerificationUUID } = EmailVerificationContext.useEmailVerificationContext();
    const { setView } = ViewContext.useViewContext();
    const { handleInstalledExtensionClick } = useWalletItemActions.useWalletItemActions();
    const { connectWithEmail, loading: isEmailProviderLoading } = useConnectWithEmail.useConnectWithEmail({
        emailWalletConnector,
        handleConnect: handleInstalledExtensionClick,
    });
    const { providers } = projectSettings || {};
    const isInjectedWalletProviderEnabled = emailWalletConnector !== undefined;
    const isMagicOrBloctoEnabled = isInjectedWalletProviderEnabled &&
        Boolean(providers === null || providers === void 0 ? void 0 : providers.filter((provider) => provider.enabledAt &&
            (provider.provider === sdkApi.ProviderEnum.MagicLink ||
                provider.provider === sdkApi.ProviderEnum.Blocto)).length);
    const handleEmailOnlyLoginSubmit = (emailInput) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        const { email, verificationUUID } = yield api.createEmailVerification({
            email: emailInput,
            environmentId,
        });
        setView('login-with-email-verification');
        setEmailForVerification(email);
        setVerificationUUID(verificationUUID);
    });
    const handleMagicLinkOrBloctoSubmit = (emailInput) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        yield connectWithEmail(emailInput);
    });
    const submitEmail = (emailInput) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if (isMagicOrBloctoEnabled) {
            yield handleMagicLinkOrBloctoSubmit(emailInput);
            return;
        }
        yield handleEmailOnlyLoginSubmit(emailInput);
    });
    return {
        handleEmailOnlyLoginSubmit,
        isEmailProviderLoading,
        submitEmail,
    };
};

exports.useEmailProvider = useEmailProvider;
