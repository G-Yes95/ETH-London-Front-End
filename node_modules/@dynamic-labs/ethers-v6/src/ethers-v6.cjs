'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../_virtual/_tslib.cjs');
var ethers6 = require('ethers6');

/* eslint-disable import/no-extraneous-dependencies */
const EthersExtension = {
    extend: (connector) => {
        const extensionSupportChain = ['ETH', 'EVM'];
        if (!extensionSupportChain.some((chain) => connector.supportedChains.includes(chain))) {
            return;
        }
        connector.ethers = {
            getRpcProvider: function () {
                var _a, _b;
                return _tslib.__awaiter(this, void 0, void 0, function* () {
                    const publicClient = yield connector.getPublicClient();
                    const { chain, transport } = publicClient;
                    const network = {
                        chainId: chain === null || chain === void 0 ? void 0 : chain.id,
                        ensAddress: (_b = (_a = chain === null || chain === void 0 ? void 0 : chain.contracts) === null || _a === void 0 ? void 0 : _a.ensRegistry) === null || _b === void 0 ? void 0 : _b.address,
                        name: chain === null || chain === void 0 ? void 0 : chain.name,
                    };
                    if (transport.type === 'fallback') {
                        const providers = transport.transports.map(({ value }) => new ethers6.JsonRpcProvider(value === null || value === void 0 ? void 0 : value.url, network));
                        if (providers.length === 1)
                            return providers[0];
                        return new ethers6.FallbackProvider(providers);
                    }
                    return new ethers6.JsonRpcProvider(transport.url, network);
                });
            },
            getSigner: function () {
                return _tslib.__awaiter(this, void 0, void 0, function* () {
                    const provider = yield connector.ethers.getWeb3Provider();
                    const signer = provider.getSigner();
                    return signer;
                });
            },
            getWeb3Provider: function () {
                var _a, _b;
                return _tslib.__awaiter(this, void 0, void 0, function* () {
                    const { chain } = yield connector.getPublicClient();
                    const walletClient = connector.getWalletClient();
                    const { transport } = walletClient !== null && walletClient !== void 0 ? walletClient : {};
                    if (!transport) {
                        throw new Error('Wallet is not connected, cannot create ethers client');
                    }
                    const network = {
                        chainId: chain === null || chain === void 0 ? void 0 : chain.id,
                        ensAddress: (_b = (_a = chain === null || chain === void 0 ? void 0 : chain.contracts) === null || _a === void 0 ? void 0 : _a.ensRegistry) === null || _b === void 0 ? void 0 : _b.address,
                        name: chain === null || chain === void 0 ? void 0 : chain.name,
                    };
                    const provider = new ethers6.BrowserProvider(transport, network);
                    return provider;
                });
            },
        };
    },
    name: 'ethers-wallet-connector-extension',
};

exports.EthersExtension = EthersExtension;
