'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
require('../schemas/walletConnectSourceSchema.cjs');
var walletBookSchema = require('../schemas/walletBookSchema.cjs');
require('../schemas/walletSchema.cjs');
var logger = require('../helpers/logger.cjs');
var getWalletBookCdnUrl = require('../helpers/getWalletBookCdnUrl.cjs');
var walletBookFallbacks = require('../../wallet-book-fallbacks.cjs');

const useWalletBookCdn = () => {
    const [walletBook, setWalletBook] = react.useState({});
    react.useEffect(() => {
        const fetchWalletBook = async () => {
            const url = getWalletBookCdnUrl.getWalletBookCdnUrl();
            let data;
            try {
                const response = await fetch(url);
                if (response.ok) {
                    data = walletBookSchema.walletBookSchema.parse(await response.json());
                }
                else {
                    throw new Error('Fetch Failed with status: ' + response.status);
                }
            }
            catch (e) {
                logger.logger.error(`Failed to fetch wallet book data from CDN (${url})`, e);
            }
            if (!data) {
                logger.logger.warn('Falling back to wallet book data from wallet-book-fallbacks.json');
                data = walletBookSchema.walletBookSchema.parse(walletBookFallbacks["default"]);
            }
            setWalletBook(data);
        };
        fetchWalletBook();
    }, []);
    return walletBook;
};

exports.useWalletBookCdn = useWalletBookCdn;
